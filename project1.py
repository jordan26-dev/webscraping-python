# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'project.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox    
from selenium import webdriver
from bs4 import BeautifulSoup

import requests
import re
import pandas as pd



class Ui_WebScraping(object):
    
    html_doc = """
        <!-- This is the example.html example file. -->

        <html bg="black">
        <head>
        <title>The Website Title</title>
        </head>
        <body>
            <p>Download my 
                <strong>Python</strong> 
                book from 
                <a href="https://
                    inventwithpython.com">my website</a>.
            </p>
            <p class="slogan">Learn Python the easy way!</p>
            <p>
                By 
                <span id="author" name="bottom-span" rel="first span">Al Sweigart</span>
            </p>
            <p>
                By 
                <span name="bottom-span" rel="second-span">
                    <b>This is the bottom part of the page.</b>
                </span>
            </p>
        </body>
        </html>
    """
    page = requests.get('https://docs.python.org/3/library/random.html')
    soup = BeautifulSoup(html_doc, 'html.parser')    
    result_tag = []
    selected_tag = []
    selected_attr = []
    attr_value = ''
    
    tags = []
    attributes = []
    errors = []
    
    def __init__(self) -> None:
        self.tags()
        
        
    def tags(self):    
        
        element_tags = {tag.name for tag in self.soup.findAll()}

        if not element_tags:
            return None        
              
        self.tags = element_tags
        return self

    def tag(self, tag):
        print('tag name =>', tag)
        
        if tag not in self.tags:   
            self.selected_tag = [] 
        else:                   
            self.selected_tag = tag                            
            print('returned value =>', self.selected_tag)  
              
        self.get_attributes()
        
        return self

    def tag_count(self):
        return len(self.tags)

    def get_attributes(self):
        
        if not self.selected_tag:
            self.attributes = []
            return self
        
        elements = self.soup.find_all(self.selected_tag)  # Replace 'a' with the tag you are interested in
        
        unique_attributes = set()
        # Iterate over each 'span' tag and collect the attributes
        for tag in elements:
            for attr in tag.attrs:
                unique_attributes.add(attr)
        
        self.attributes = unique_attributes
        
        return self # return all tag attibutes
    
        # # Print the unique attributes
        # print("Unique attributes found in <span> tags:")
        # for attr in HtmlElement.attributes:
        #     print(attr)
       
        
    
    
    def attribute(self, attr):
        if attr not in self.attributes:   
            self.selected_attr = []
                         
        self.selected_attr = attr
        
        print('HtmlElement.selected_attr =>', self.selected_attr)  
        return self
    
   
        
    def find(self, value=''):
        self.result_tag = []
        try:
            selected_tag = self.soup.select(f'{self.selected_tag}[{self.selected_attr}={value}]')[0]  # 0 -> Get the first element in the list
        except Exception:
            selected_tag = False
            print("An error occured resulting to not finding the Tag.")
        finally:            
            if selected_tag:                   
                self.result_tag = selected_tag                      
            else:
                print("Tag not found")
            
        return self
            
    def count_element(self):
        return len(self.result_tag)
    
    def text(self):
        if self.result_tag:
           return self.result_tag.get_text()
    
    def innerHTML(self):
        if self.result_tag:
           return self.result_tag.encode_contents()      
        
        
    ####################################################    
    def setupUi(self, WebScraping):
        WebScraping.setObjectName("WebScraping")
        WebScraping.resize(456, 260)
        WebScraping.setAutoFillBackground(False)
        WebScraping.setStyleSheet("background-color: rgb(245, 245, 245)")
        WebScraping.setDocumentMode(False)
        WebScraping.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(WebScraping)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(40, 30, 361, 191))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.groupBox.setFont(font)
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(20, 30, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(20, 70, 171, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(20, 100, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(150, 30, 191, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"selection-background-color: rgb(85, 85, 85);\n"
"")
        self.comboBox.setObjectName("comboBox")
        self.load_tags()
        
        self.txt_attribute = QtWidgets.QLineEdit(self.groupBox)
        self.txt_attribute.setGeometry(QtCore.QRect(150, 70, 191, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txt_attribute.setFont(font)
        self.txt_attribute.setObjectName("txt_attribute")
        self.text_value = QtWidgets.QLineEdit(self.groupBox)
        self.text_value.setGeometry(QtCore.QRect(150, 100, 191, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_value.setFont(font)
        self.text_value.setObjectName("text_value")
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(250, 150, 93, 28))
        self.pushButton.setStyleSheet("background-color: rgb(89, 89, 89);\n"
"color: rgb(255, 255, 255);")
        self.pushButton.setObjectName("pushButton")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(20, 150, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_no_of_elements = QtWidgets.QLabel(self.groupBox)
        self.label_no_of_elements.setGeometry(QtCore.QRect(160, 150, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_no_of_elements.setFont(font)
        self.label_no_of_elements.setObjectName("label_no_of_elements")
        WebScraping.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(WebScraping)
        self.statusbar.setObjectName("statusbar")
        WebScraping.setStatusBar(self.statusbar)

        self.retranslateUi(WebScraping)
        QtCore.QMetaObject.connectSlotsByName(WebScraping)

    def retranslateUi(self, WebScraping):
        _translate = QtCore.QCoreApplication.translate
        WebScraping.setWindowTitle(_translate("WebScraping", "HTML Element Mapper"))
        self.label.setText(_translate("WebScraping", "Select Element:"))
        self.label_2.setText(_translate("WebScraping", "Attribute:"))
        self.label_3.setText(_translate("WebScraping", "Value:"))      
        self.pushButton.setText(_translate("WebScraping", "Select"))
        self.pushButton.clicked.connect(self.show_message_box)
        self.label_4.setText(_translate("WebScraping", "No. of Elements found:"))
        self.label_no_of_elements.setText(_translate("WebScraping", "0"))

    def is_not_empy(self, text): # validates if string is empty or None
        return bool(text)
        

    def show_message_box(self):        
        msg = QMessageBox()
        msg.setWindowTitle("MSG TITLE")
       
        # set total elements found
        self.label_no_of_elements.setText(str(self.count_element()))
        
        # selected values
        tag = self.comboBox.currentText() 
        attr = self.txt_attribute.text()
        value = self.text_value.text()
        
        # validation. Check for empty values
        self.errors = []
        
        if not self.is_not_empy(self.comboBox.currentText()):
            self.errors.append({
                'tag': 'no selected tag'
            })
        if not self.is_not_empy(self.txt_attribute.text()):
            self.errors.append({
                'attr': 'no attr provided'
            })
        if not self.is_not_empy(self.text_value.text()):
            self.errors.append({
                'value': 'empty attr value'
            })
     
        
        element = self.tag(tag).attribute(attr).find(value)
        msg.setInformativeText(element.text())        
        msg.setDetailedText(str(element.innerHTML()))
                           
        x = msg.exec_()
        
        
    def load_tags(self):
        self.comboBox.clear()
                
        for tag in self.tags:
            self.comboBox.addItem(tag)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    WebScraping = QtWidgets.QMainWindow()
    ui = Ui_WebScraping()
    ui.setupUi(WebScraping)
    WebScraping.show()
    sys.exit(app.exec_())
